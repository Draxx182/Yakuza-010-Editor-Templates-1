//------------------------------------------------
//--- 010 Editor Binary Template
//
//      File: fighter_command.cfc
//   Authors: Draxx182 - Used HeartlessSeph's template as a base
//   Version: 1
//   Purpose: parameter.bin editing
//   History
//   1.00    03/09/2021  Draxx182
//------------------------------------------------

//---------------------------------------------
// Includes
//---------------------------------------------

BigEndian();
local int UnkTableStart<hidden=true>;
local int DataPointer<hidden=true>;
local int DataPointer2<hidden=true>;
local int NamePointer<hidden=true>;
local int NamePointer2<hidden=true>;
local int NamePointer3<hidden=true>;
local int ActorPointer<hidden=true>;
local int PropertyPointer<hidden=true>;
local int ActorStart<hidden=true>;
local int j<hidden=true>;
local int j2<hidden=true>;

struct File{
	struct FileHeader{
		uint32 filetype<name="Filetype",bgcolor = cRed>;
		uint16 Endianess<name = "Endianess ID",bgcolor = cRed>;
		uint16 unk;
		uint32 FileVersion<name="File Version",bgcolor = cRed>;
		uint32 filesize<name="Filesize",bgcolor = cRed>;
	}fileheader<name = "File Header",bgcolor = cRed>;

   struct DataTable{
		uint32 wepnum<name="Amount of Weapons">;
		uint32 unk;
		uint32 wepptr<name="Pointer to Weapon Data Start">;
		uint32 arrayptr<name="Pointer to Array Data Start">;
		uint32 effectnum<name="Amount of Effects">;
		uint32 effectptr<name="Pointer to Effects Data Start">;
		uint32 ptr;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
		uint32 unk;
      struct Unk1Table{
		for( j = 0; j < 99999; j++ )
          {
            uint16 textendcheck<hidden=true>;
            FSkip(-2);
            if (textendcheck == 16383)
            {
	           j = 99999;
	           uint16 unk;
            }
            else
            {
              struct Unk2Table{
	               uint16 unk;
              }unk2<name="Unk",bgcolor = cRed>;
            }
          }
	       uint32 unk;
	       uint32 unk;
	   }unk1table<name = "Array Unk Table",bgcolor = cRed>;
	}datatable<name = "Data Table",bgcolor = cRed>;
   struct Weapons{
       struct WeaponStrings{
		    for( j = 0; j < datatable.wepnum; j++ )
          {
              struct StringWEPTable{
	               char StringValue[];
              }wepS<read = GetString,name="String",bgcolor = cRed>;
          }
	    }wepstrings<name="Weapon Strings Table",bgcolor = cRed>;
       FSkip(2);
    
       struct WeaponData{
		    for( j = 0; j < datatable.wepnum; j++ )
          {
              struct DataWEPTable{
	               uint32 DataValue;
                  DataPointer = FTell();
                  FSeek(DataValue);
                  char DataString[];
                  FSeek(DataPointer);
              }wepD<name="Data",bgcolor = cRed, read = GetData>;
          }
	    }wepdata<name="Weapon Data Table",bgcolor = cRed>;
       FSkip(8);
   }weapon<name="Weapon Table",bgcolor = cRed>;

   struct Effects{
        struct EffectsStrings{
          for( j = 0; j < datatable.effectnum; j++ )
          {
              struct StringEffectsTable{
	               char StringValue[];
              }effectS<read = GetString2,name="String",bgcolor = cRed>;
          }
        }effectstrings<name="Effects Strings Table",bgcolor = cRed>;
        FSkip(5);

        struct EffectsData{
          for( j = 0; j < datatable.effectnum; j++ )
          {
              struct DataEffectsTable{
	               uint32 DataValue<name="Pointer to Name">;
                  DataPointer2 = FTell();
                  FSeek(DataValue);
                  char DataString[];
                  FSeek(DataPointer2);
              }unkS<name="Data",bgcolor = cRed, read = GetData2>;
          }
        }effectdata<name="Effects Data Table", bgcolor = cRed>;
   }effect<name="Effects Table", bgcolor = cRed>;
   FSeek(datatable.ptr);
   uint32 unk;

}file<name="parameter.bin",bgcolor = cRed>;

string GetString(StringWEPTable& j)
{
    return j.StringValue;
}

string GetString2(StringEffectsTable& j)
{
    return j.StringValue;
}

string GetData(DataWEPTable& j)
{
    return j.DataString;
}

string GetData2(DataEffectsTable& j)
{
    return j.DataString;
}