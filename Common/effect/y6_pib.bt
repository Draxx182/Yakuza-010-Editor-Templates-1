//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Y6 Pib
//   Authors: Jhrino
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "pib_types.bt"

LittleEndian();

struct Header
{
    char magic[4]<name = "Identifier">;
    byte unk1<hidden = true>;
    byte endian<name = "Endian">;
    byte unk2[2]<hidden = true>;
    int version<name = "PIB Version">;
    int padding<hidden = true>;
}hdr<name = "File Information", bgcolor = cRed>;

struct PibHeader
{
    int pibID<name = "PIB ID">;
    int emitterCount<name = "Emitter Count">;
    int pibLength<name = "PIB Duration (In Ticks)">;
    int durationOffset<name="Duration Offset">;
    float speed<name = "Speed">;
    float forwardOffset<name = "Forward Offset">;
    float maxIntensity<name = "Max Intensity">;
    float radius<name = "Radius">;
    float range<name = "Range">;
    float evCorrect<name = "EV Correct">;
    
    struct ColAnim
    {
        float colAnimR[32]<name = "Color R Animation">;
        float colAnimG[32]<name = "Color G Animation">;
        float colAnimB[32]<name = "Color B Animation">;
        float colAnimI[32]<name = "Intensity Animation">;
    }colAnim<name = "Color Animation">;

    float colorTime<name = "Color Time">;
    float intensityTime<name = "Intensity Time">;
    uint flags<name = "Flags">;
    uint soundCuesheet<name = "Sound ID">;
    byte padding[8]<hidden = true>;
    matrix4x4 baseMtx<name = "Base Matrix">;
    vec3f scale<name = "Scale">;

    byte padding2[8]<hidden = true>;

    struct Fade
    {
        float farFadeDist<name = "Far Fade Distance">;
        float farFadeOffs<name = "Far Fade Offset">;
        float nearFadeDist<name = "Near Fade Distance">;
        float nearFadeOffs<name = "Near Fade Offset">;
        float nearFadeDistAll<name = "Near Fade Distance All">;
        float nearFadeOffsAll<name = "Near Fade Offset All">;
    }fade<name = "Fade">;

    byte padding3[4]<hidden = true>;

    local int i = 0;


    //temporarily exec once
    for(i = 0; i < emitterCount; i++)
    {
        struct Emitter
        {   
            uint flags<name = "Flags?", comment = "Seems to be used to determine type of emitter, Model or Billboard">;
            uint flags2<name = "Flags">;
            uint flags3<name = "Flags">;
            byte blend<name = "Blend">;
            byte geoVertex<name = "Geometry Vtx">;
            byte insVtx<name = "Ins Vtx">;            
            byte padding1<hidden = true>;
            byte unk2[16]<name = "Unknown">;
            
            vec3f aaBoxCenter<name = "AA Box Center">;
            vec3f aaBoxExtent<name = "AA Box Extent">;
            int geoVtxCount<name = "Geometry Vertex Count">;

            struct Blur
            {
                float blurVelocityScale<name = "Blur Velocity Scale">;
                float blurAlphaScale<name = "Blur Alpha Scale">;
                unsigned int blurNum<name = "Blur Count">;  
                float blurAlphaS<name = "Blur Alpha S">;
                float blurAlphaE<name = "Blur Alpha E">;
                float blurSec<name = "Blur Sec">;
            }blur<name = "Blur">;
            
            float shadowRate<name = "Shadow Rate">;
            byte unknownVar1[4];

            struct Metaball
            {
                float metaballRate<name = "Metaball Rate">;
                rgba32 metaballColor<name = "Metaball Color">;
                float metaballNmlRange<name = "Metaball Normal Range">;
                float metaballNmlZ<name = "Metaball Normal Z">;
                float metaballLtShininess<name = "Metaball Light Shininess">;
                float metaballLtIoe<name = "Metaball Light IOE">;
                float metaballLtLambertOfs<name = "Metaball Light Lambert Offset">;          
                float metaballLtRatio<name = "Metaball Light Ratio">;
              float metaballHltIntensity<name = "Metaball H Light Intensity">;
            }mtball<name = "Metaball">;

            float directivityH<name = "Directivity H">;
            float directivityV<name = "Directivity V">;
            float directivityPower<name = "Directivity Power">;

            unsigned int culling<name = "Culling">;
            float lightScale<name = "Light Scale">;
            float lightRatio<name = "Light Ratio">;
            float glare<name = "Glare">;

            float collisionRestitution<name = "Collision Restitution">;
            float collisionFriction<name = "Collision Friction">;
            float vecScale<name = "Vec Scale">;
            float normalScale<name = "Normal Scale">;

            struct Track
            {
                float trackFadeLength<name = "Track Fade Length">;
                unsigned int trackDivNum<name = "Track Div Num">;
            }track<name = "Track">;

            byte padding2[12]<hidden = true>;

            struct UnkStr1
            {
                float unk[8];
            }unkstr1<name = "Unknown Structure 1">;

            AnimationDataDE animData<name = "Animation Data">;

            struct UnkStr2
            {
                float dat[8]<name = "Unknown">;
            }unkstr2<name = "Unknown Structure 2">;

            struct UnkStr3
            {
                float dat[2]<name = "Unknown">;
            }unkStr3<name = "Unknown Structure 3">;

            vec3f minSpread<name = "Min Spread">;
            vec3f maxSpread<name = "Max Spread">;

            float unk1<name = "Unknown">;

            struct UnkStr4
            {
                float dat[5]<name = "Unknown">;
            }unkStr4<name = "Unknown Structure 4">;

            float unk3<name = "Unknown">;
            float unk4<name = "Unknown">;
            float unk5<name = "Unknown">;
            float unk6<name = "Unknown">;

            int dataSize1<name = "Data Size 1">;
            
            //Just the header no image data
            DDSHeader ddshdr<name = "DDS Header", bgcolor = cRed>;


            local int data1Size = (dataSize1 - 128);
            local int chunkSize = data1Size / 6;
            local int chunkCount = data1Size / chunkSize;
    
            struct Data1Chunks
            {
                local float chunkFloats = chunkSize / 4;

                struct Data1Chunkeey
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey1
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey2
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey3
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey4
                {
                    rgbaf32 dat[chunkFloats / 4]<name = "Data">;
                }dat1Chnk<name = "Color Animation Curve">;

                struct Data1Chunkeey5
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

            }dat1Chunks<name = "Data1 Chunks", bgcolor = cSilver>;


            int textureCount<name = "Texture Count", bgcolor = cGreen>;


            local byte emitterType = GetEmitterType(flags);


            local int texI = 0;

            for(texI = 0; texI < textureCount; texI++)
            {
                struct tex
                {
                    char name[32]<name = "TextureName">;
                }texy<name = name, bgcolor = cGreen>;
            }

            FSeek(FTell() + 4);
            int extraTexCount<bgcolor = cGreen>;
            local int l = 0;
            
            for(l = 0; l < extraTexCount; l++)
                struct extraTex
                {
                    char name[32]<name = "TextureName">;
                }texy<name = name, bgcolor = cGreen>;               

            int ptcCount<name = "Particle Count", bgcolor = cDkGreen>;

             struct GeoVTX
             {
            switch(geoVertex)
            {
                default:
                     l = 0;
                        for(l = 0; l < geoVtxCount; l++)
                        {
                             struct geoVtxDat
                             {
                                 float val[44 /4]<name = "Values">;
                             }geoVtx<name = "Geo VTX Chunk">;
                        }
                                  
                break;
                case 0:
                     l = 0;
                        for(l = 0; l < geoVtxCount; l++)
                        {
                             struct geoVtxDat2
                             {
                                 float val[70 /4]<name = "Values">;
                             }geoVtx<name = "Geo VTX Chunk">;
                        }
                break;                                               
            }
            }geoVtxHold<name = "Geo VTX">;


            if(emitterType == 0)
            {
                struct model
                {
                    local uint k = 0;

                    for(k; k < ptcCount; k++)
                        ModelParticleV29 modelChunk<name = "Particle">;
                   
                }mdl<name = "Model", bgcolor = cDkGreen>;
            }
            else if(emitterType == 1)
            {
                struct billboard
                {
                    local uint unkDat1Start = FTell();

                    local uint k = 0;

                    for(k; k < ptcCount; k++)
                        BillboardParticleV29 billChunk<name = "Particle">;
                   
                }billb<name = "Billboard Particles", bgcolor = cDkGreen>;
            }
            
            
                       
        }emitter<name = "Emitter", bgcolor = cAqua>;
    }


}pibInf<name = "PIB Information", bgcolor = cYellow>;


//0 = Model
//1 = Billboard
byte GetEmitterType(uint flag)
{
    if((flag & 1 << 6) != 0)
        return 1;

    return 0;
}

/*
struct UnkSection1
{
    ushort unk1<name = "Unknown">;
    ushort unk2<name = "Unknown">;

    int unk3<name = "Unknown">;
    int padding1<hidden = true>;

    byte unk4<name = "Unknown">;
   
    byte endian<name = "Endian">;
    byte padding2[2]<hidden = true>;
    
    int unk5[3]<hidden = true>;
    float unkfloatArr1[6]<name = "Unknown Float Array">;
    
    int cursedInt <name = "Cursed Number", comment = "Same from 19 (Y3) to 27 (YLAD) what does it do!?!">;
    int padding3[4]<hidden = true>;
}unkSec1<name = "Unknown Section 1", bgcolor = cAqua>;
*/