//------------------------------------------------
//--- 010 Editor v12.0.1 Binary Template
//
//      File: Y3 Pib
//   Authors: Jhrino
//   Version: 
//   Purpose: 
//  Category: 
// File Mask: 
//  ID Bytes: 
//   History: 
//------------------------------------------------

#include "pib_types.bt"

BigEndian();

struct Header
{
    char magic[4]<name = "Identifier">;
    byte unk1<hidden = true>;
    byte endian<name = "Endian">;
    byte unk2[2]<hidden = true>;
    int version<name = "PIB Version">;
    int padding<hidden = true>;
}hdr<name = "File Information", bgcolor = cRed>;

struct PibHeader
{
    int pibID<name = "PIB ID">;
    int emitterCount<name = "Emitter Count">;
    int pibLength<name = "PIB Duration (In Ticks)">;
    int durationOffset<name="Duration Offset">;
    float speed<name = "Speed">;
    float forwardOffset<name = "Forward Offset">;
    float maxIntensity<name = "Max Intensity">;
    byte unk4[4]<name = "Unknown Fields">;
    float radius<name = "Radius">;
    float range<name = "Range">;
    
    LittleEndian();
    int unkFlags1<name = "Unknown Flags", comment = "Is this little endian?">;
    BigEndian();

    int unk7<name = "Unknown">;

    matrix4x4 baseMtx<name = "Base Matrix">;
    vec3f unkVec<name = "Scale">;

    byte padding[24]<hidden = true>;

    struct Fade
    {
        float farFadeDist<name = "Far Fade Distance">;
        float farFadeOffs<name = "Far Fade Offset">;
        float nearFadeDist<name = "Near Fade Distance">;
        float nearFadeOffs<name = "Near Fade Offset">;
        float nearFadeDistAll<name = "Near Fade Distance All">;
        float nearFadeOffsAll<name = "Near Fade Offset All">;
    }fade<name = "Fade">;

    byte paddinge[4]<hidden = true>;
    local int i = 0;

    //temporarily exec once
    for(i = 0; i < emitterCount; i++)
    {
        struct Emitter
        {   
            uint flags<name = "Flags">;
            uint flags2<name = "Flags">;
            uint flags3<name = "Flags">;
            byte unkbyte<name = "Unknown">;
            byte type<name = "Type">;
            byte padding1[14]<hidden = true>;
            
            vec3f aaBoxCenter<name = "AA Box Center">;
            vec3f aaBoxExtent<name = "AA Box Extent">;

            int geoVtxCount<name = "Geometry Vertex Count">;

            struct UnkStr1
            {
                int unk1<name = "Unknown">;
                float unk2<name = "Unknown">;
                float unk3<name = "Unknown">;
                int unk4<name = "Unknown">;                
                byte unkibunki[4]<name = "Unknown">;
                int unkflag4<name = "Unknown Flag">;
            }unkstr1<name = "Unknown Structure 1">;

            struct Metaball
            {
                float metaballRate<name = "Metaball Rate">;
                rgba32 metaballColor<name = "Metaball Color">;
                float metaballNmlRange<name = "Metaball Normal Range">;
                float unk1<name = "Unknown">;
                float unk2<name = "Unknown">;
                float unk3<name = "Unknown">;
                float metaballLtShininess<name = "Metaball Light Shininess">;
                float metaballLtIoe<name = "Metaball Light IOE">;
            }mtball<name = "Metaball">;

            AnimationData animData<name = "Animation Data">;

            struct UnkStr3
            {
                float unk[10];
            }unkStr3<name = "Unknown Structure 3">;

            vec3f minSpread<name = "Min Spread">;
            vec3f maxSpread<name = "Max Spread">;

            float unk6<name = "Unknown">;
            float unk7<name = "Unknown">;
            float unk8<name = "Unknown">;
            float unk9<name = "Unknown">;
            float unk10<name = "Unknown">;
            float unk11<name = "Unknown">;
            
            struct UnkStr4
            {
                float unk[4];
            }unkStr4<name = "Unknown Structure 4">;

            struct UnkStr5
            {
                float unk[4];
            }unkStr5<name = "Unknown Structure 5">;

            float unk12<name = "Unknown">;

            struct UnkStr6
            {
                float unk[12];
            }unkStr6<name = "Unknown Structure 6">;

            struct UnkStr7
            {
                float unk[15];
            }unkStr7<name = "Unknown Structure 7">;
            int dataSize1<name = "Data Size 1">;
            
            //Just the header no image data
            struct DDSHeader
            {
                byte header[128]<name = "Header">;
            }ddshdr<name = "DDS Header", bgcolor = cRed>;
            
            LittleEndian();

            local int data1Size = (dataSize1 - 128);
            local int chunkSize = data1Size / 6;
            local int chunkCount = data1Size / chunkSize;

            struct Data1Chunks
            {
                local float chunkFloats = chunkSize / 4;

                struct Data1Chunkeey
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey1
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey2
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey3
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

                struct Data1Chunkeey4
                {
                    rgbaf32 dat[chunkFloats / 4]<name = "Data">;
                }dat1Chnk<name = "Color Animation Curve">;

                struct Data1Chunkeey5
                {
                    float dat[chunkFloats]<name = "Data">;
                }dat1Chnk<name = "Chunk">;

            }dat1Chunks<name = "Data1 Chunks", bgcolor = cSilver>;

            BigEndian();

            byte textureCount<name = "Texture Count", bgcolor = cGreen>;

            local byte emitterType = GetEmitterType(flags);

            local int texI = 0;

            for(texI = 0; texI < textureCount; texI++)
            {
                if(texI > 0)
                  FSeek(FTell() + 1);

                struct tex
                {
                    char name[31]<name = "TextureName">;
                }texy<name = name, bgcolor = cGreen>;
            }

            FSeek(FTell() + 3);
            int ptcCount<bgcolor = cDkGreen, name = "Particle Count">;

            switch(type)
            {
               default:
                Printf("Unknown model type %i\n", type);
                //intentionally cause a 010 editor error
                //serving as a breakpoint
                local int i = 0;
                for(i; i < 2; i++)
                    byte bogusarray[1];
                break;
                              
                case 0:
                     byte unkDat[32 * geoVtxCount]<name = "Unknown Data">;
                break;
                case 1:
                     byte unkDat[44 * geoVtxCount]<name = "Unknown Data">;
                case 2:
                     byte unkDat[20 * geoVtxCount]<name = "Unknown Data">;
                break;
                case 3:
                     byte unkDat[40 * geoVtxCount]<name = "Unknown Data">;
                break;
                case 4:
                     byte unkDat[52 * geoVtxCount]<name = "Unknown Data">;
                break;
                case 5:
                     byte unkDat[28 * geoVtxCount]<name = "Unknown Data">;
                break;
            }

            if(emitterType == 0)
            {
                struct model
                {
                    local uint unkDat1Start = FTell();
                    
                    local uint k = 0;

                    for(k; k < ptcCount; k++)
                        ModelParticle modelChunk<name = "Particle">;
            
                }mdl<name = "Model Particles", bgcolor = cDkGreen>;
            }
            else if(emitterType == 1)
            {
                struct billboard
                {
                    local uint unkDat1Start = FTell();

                    local uint k = 0;

                    for(k; k < ptcCount; k++)
                        BillboardParticle billChunk<name = "Particle">;
                   
                }billb<name = "Billboard Particles", bgcolor = cDkGreen>;
            }
                       
        }emitter<name = "Emitter", bgcolor = cAqua>;
    }


}pibInf<name = "PIB Information", bgcolor = cYellow>;


//0 = Model
//1 = Billboard
byte GetEmitterType(uint flag)
{
    local byte typeFlag = flag >> 6;

    if((typeFlag & 1) || (typeFlag & 0x40))
        return 1;

    return 0;
}

/*
struct UnkSection1
{
    ushort unk1<name = "Unknown">;
    ushort unk2<name = "Unknown">;

    int unk3<name = "Unknown">;
    int padding1<hidden = true>;

    byte unk4<name = "Unknown">;
   
    byte endian<name = "Endian">;
    byte padding2[2]<hidden = true>;
    
    int unk5[3]<hidden = true>;
    float unkfloatArr1[6]<name = "Unknown Float Array">;
    
    int cursedInt <name = "Cursed Number", comment = "Same from 19 (Y3) to 27 (YLAD) what does it do!?!">;
    int padding3[4]<hidden = true>;
}unkSec1<name = "Unknown Section 1", bgcolor = cAqua>;
*/